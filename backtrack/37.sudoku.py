class Solution:
    def solveSudoku(self, b: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def valid(r,c,ch):
            for i in range(9):
                if b[r][i]!='.' and b[r][i]==ch: return False
                if b[i][c]!='.' and b[i][c]==ch: return False
                if b[3*(r//3)+i//3][3*(c//3)+i%3]!='.' and b[3*(r//3)+i//3][3*(c//3)+i%3]==ch:return False
            return True
        def solve():
            for i in range(len(b)):
                for j in range(len(b[i])):
                    if b[i][j]=='.':
                        for ch in range(ord('1'),ord('9')+1):
                            if valid(i,j,chr(ch)):
                                b[i][j] = chr(ch)
                                if solve():
                                    return True
                                else:
                                    b[i][j]='.'
                        return False
            return True
        solve()
        
                    
# Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
# Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]